== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['lochierarchy DESC NULLS LAST, CASE WHEN ('lochierarchy = 0) THEN 'i_category END ASC NULLS FIRST, 'rank_within_parent ASC NULLS FIRST], true
      +- 'Aggregate ['rollup('i_category, 'i_class)], [('sum('ss_net_profit) / 'sum('ss_ext_sales_price)) AS gross_margin#0, 'i_category, 'i_class, ('grouping('i_category) + 'grouping('i_class)) AS lochierarchy#1, 'rank() windowspecdefinition(('grouping('i_category) + 'grouping('i_class)), CASE WHEN ('grouping('i_class) = 0) THEN 'i_category END, ('sum('ss_net_profit) / 'sum('ss_ext_sales_price)) ASC NULLS FIRST, unspecifiedframe$()) AS rank_within_parent#2]
         +- 'Filter (((('d1.d_year = 2001) && ('d1.d_date_sk = 'ss_sold_date_sk)) && ('i_item_sk = 'ss_item_sk)) && (('s_store_sk = 'ss_store_sk) && 's_state IN (TN,TN,TN,TN,TN,TN,TN,TN)))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'UnresolvedRelation `store_sales`
               :  :  +- 'SubqueryAlias `d1`
               :  :     +- 'UnresolvedRelation `date_dim`
               :  +- 'UnresolvedRelation `item`
               +- 'UnresolvedRelation `store`

== Analyzed Logical Plan ==
gross_margin: double, i_category: string, i_class: string, lochierarchy: tinyint, rank_within_parent: int
GlobalLimit 100
+- LocalLimit 100
   +- Sort [lochierarchy#1 DESC NULLS LAST, CASE WHEN (cast(lochierarchy#1 as int) = 0) THEN i_category#116 END ASC NULLS FIRST, rank_within_parent#2 ASC NULLS FIRST], true
      +- Project [gross_margin#0, i_category#116, i_class#117, lochierarchy#1, rank_within_parent#2]
         +- Project [gross_margin#0, i_category#116, i_class#117, lochierarchy#1, _w0#126, _w1#130, _w2#131, _w3#132, rank_within_parent#2, rank_within_parent#2]
            +- Window [rank(_w3#132) windowspecdefinition(_w1#130, _w2#131, _w3#132 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#2], [_w1#130, _w2#131], [_w3#132 ASC NULLS FIRST]
               +- Aggregate [i_category#116, i_class#117, spark_grouping_id#113], [(sum(ss_net_profit#29) / sum(ss_ext_sales_price#22)) AS gross_margin#0, i_category#116, i_class#117, (cast((shiftright(spark_grouping_id#113, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#113, 0) & 1) as tinyint)) AS lochierarchy#1, (sum(ss_net_profit#29) / sum(ss_ext_sales_price#22)) AS _w0#126, (cast((shiftright(spark_grouping_id#113, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#113, 0) & 1) as tinyint)) AS _w1#130, CASE WHEN (cast(cast((shiftright(spark_grouping_id#113, 0) & 1) as tinyint) as int) = 0) THEN i_category#116 END AS _w2#131, (sum(ss_net_profit#29) / sum(ss_ext_sales_price#22)) AS _w3#132]
                  +- Expand [List(ss_sold_date_sk#7, ss_sold_time_sk#8, ss_item_sk#9, ss_customer_sk#10, ss_cdemo_sk#11, ss_hdemo_sk#12, ss_addr_sk#13, ss_store_sk#14, ss_promo_sk#15, ss_ticket_number#16, ss_quantity#17, ss_wholesale_cost#18, ss_list_price#19, ss_sales_price#20, ss_ext_discount_amt#21, ss_ext_sales_price#22, ss_ext_wholesale_cost#23, ss_ext_list_price#24, ss_ext_tax#25, ss_coupon_amt#26, ss_net_paid#27, ss_net_paid_inc_tax#28, ss_net_profit#29, d_date_sk#30, d_date_id#31, d_date#32, d_month_seq#33, d_week_seq#34, d_quarter_seq#35, d_year#36, d_dow#37, d_moy#38, d_dom#39, d_qoy#40, d_fy_year#41, d_fy_quarter_seq#42, d_fy_week_seq#43, d_day_name#44, d_quarter_name#45, d_holiday#46, d_weekend#47, d_following_holiday#48, d_first_dom#49, d_last_dom#50, d_same_day_ly#51, d_same_day_lq#52, d_current_day#53, d_current_week#54, d_current_month#55, d_current_quarter#56, d_current_year#57, i_item_sk#58, i_item_id#59, i_rec_start_date#60, i_rec_end_date#61, i_item_desc#62, i_current_price#63, i_wholesale_cost#64, i_brand_id#65, i_brand#66, i_class_id#67, i_class#68, i_category_id#69, i_category#70, i_manufact_id#71, i_manufact#72, i_size#73, i_formulation#74, i_color#75, i_units#76, i_container#77, i_manager_id#78, i_product_name#79, s_store_sk#80, s_store_id#81, s_rec_start_date#82, s_rec_end_date#83, s_closed_date_sk#84, s_store_name#85, s_number_employees#86, s_floor_space#87, s_hours#88, s_manager#89, s_market_id#90, s_geography_class#91, s_market_desc#92, s_market_manager#93, s_division_id#94, s_division_name#95, s_company_id#96, s_company_name#97, s_street_number#98, s_street_name#99, s_street_type#100, s_suite_number#101, s_city#102, s_county#103, s_state#104, s_zip#105, s_country#106, s_gmt_offset#107, s_tax_precentage#108, i_category#114, i_class#115, 0), List(ss_sold_date_sk#7, ss_sold_time_sk#8, ss_item_sk#9, ss_customer_sk#10, ss_cdemo_sk#11, ss_hdemo_sk#12, ss_addr_sk#13, ss_store_sk#14, ss_promo_sk#15, ss_ticket_number#16, ss_quantity#17, ss_wholesale_cost#18, ss_list_price#19, ss_sales_price#20, ss_ext_discount_amt#21, ss_ext_sales_price#22, ss_ext_wholesale_cost#23, ss_ext_list_price#24, ss_ext_tax#25, ss_coupon_amt#26, ss_net_paid#27, ss_net_paid_inc_tax#28, ss_net_profit#29, d_date_sk#30, d_date_id#31, d_date#32, d_month_seq#33, d_week_seq#34, d_quarter_seq#35, d_year#36, d_dow#37, d_moy#38, d_dom#39, d_qoy#40, d_fy_year#41, d_fy_quarter_seq#42, d_fy_week_seq#43, d_day_name#44, d_quarter_name#45, d_holiday#46, d_weekend#47, d_following_holiday#48, d_first_dom#49, d_last_dom#50, d_same_day_ly#51, d_same_day_lq#52, d_current_day#53, d_current_week#54, d_current_month#55, d_current_quarter#56, d_current_year#57, i_item_sk#58, i_item_id#59, i_rec_start_date#60, i_rec_end_date#61, i_item_desc#62, i_current_price#63, i_wholesale_cost#64, i_brand_id#65, i_brand#66, i_class_id#67, i_class#68, i_category_id#69, i_category#70, i_manufact_id#71, i_manufact#72, i_size#73, i_formulation#74, i_color#75, i_units#76, i_container#77, i_manager_id#78, i_product_name#79, s_store_sk#80, s_store_id#81, s_rec_start_date#82, s_rec_end_date#83, s_closed_date_sk#84, s_store_name#85, s_number_employees#86, s_floor_space#87, s_hours#88, s_manager#89, s_market_id#90, s_geography_class#91, s_market_desc#92, s_market_manager#93, s_division_id#94, s_division_name#95, s_company_id#96, s_company_name#97, s_street_number#98, s_street_name#99, s_street_type#100, s_suite_number#101, s_city#102, s_county#103, s_state#104, s_zip#105, s_country#106, s_gmt_offset#107, s_tax_precentage#108, i_category#114, null, 1), List(ss_sold_date_sk#7, ss_sold_time_sk#8, ss_item_sk#9, ss_customer_sk#10, ss_cdemo_sk#11, ss_hdemo_sk#12, ss_addr_sk#13, ss_store_sk#14, ss_promo_sk#15, ss_ticket_number#16, ss_quantity#17, ss_wholesale_cost#18, ss_list_price#19, ss_sales_price#20, ss_ext_discount_amt#21, ss_ext_sales_price#22, ss_ext_wholesale_cost#23, ss_ext_list_price#24, ss_ext_tax#25, ss_coupon_amt#26, ss_net_paid#27, ss_net_paid_inc_tax#28, ss_net_profit#29, d_date_sk#30, d_date_id#31, d_date#32, d_month_seq#33, d_week_seq#34, d_quarter_seq#35, d_year#36, d_dow#37, d_moy#38, d_dom#39, d_qoy#40, d_fy_year#41, d_fy_quarter_seq#42, d_fy_week_seq#43, d_day_name#44, d_quarter_name#45, d_holiday#46, d_weekend#47, d_following_holiday#48, d_first_dom#49, d_last_dom#50, d_same_day_ly#51, d_same_day_lq#52, d_current_day#53, d_current_week#54, d_current_month#55, d_current_quarter#56, d_current_year#57, i_item_sk#58, i_item_id#59, i_rec_start_date#60, i_rec_end_date#61, i_item_desc#62, i_current_price#63, i_wholesale_cost#64, i_brand_id#65, i_brand#66, i_class_id#67, i_class#68, i_category_id#69, i_category#70, i_manufact_id#71, i_manufact#72, i_size#73, i_formulation#74, i_color#75, i_units#76, i_container#77, i_manager_id#78, i_product_name#79, s_store_sk#80, s_store_id#81, s_rec_start_date#82, s_rec_end_date#83, s_closed_date_sk#84, s_store_name#85, s_number_employees#86, s_floor_space#87, s_hours#88, s_manager#89, s_market_id#90, s_geography_class#91, s_market_desc#92, s_market_manager#93, s_division_id#94, s_division_name#95, s_company_id#96, s_company_name#97, s_street_number#98, s_street_name#99, s_street_type#100, s_suite_number#101, s_city#102, s_county#103, s_state#104, s_zip#105, s_country#106, s_gmt_offset#107, s_tax_precentage#108, null, null, 3)], [ss_sold_date_sk#7, ss_sold_time_sk#8, ss_item_sk#9, ss_customer_sk#10, ss_cdemo_sk#11, ss_hdemo_sk#12, ss_addr_sk#13, ss_store_sk#14, ss_promo_sk#15, ss_ticket_number#16, ss_quantity#17, ss_wholesale_cost#18, ss_list_price#19, ss_sales_price#20, ss_ext_discount_amt#21, ss_ext_sales_price#22, ss_ext_wholesale_cost#23, ss_ext_list_price#24, ss_ext_tax#25, ss_coupon_amt#26, ss_net_paid#27, ss_net_paid_inc_tax#28, ss_net_profit#29, d_date_sk#30, ... 81 more fields]
                     +- Project [ss_sold_date_sk#7, ss_sold_time_sk#8, ss_item_sk#9, ss_customer_sk#10, ss_cdemo_sk#11, ss_hdemo_sk#12, ss_addr_sk#13, ss_store_sk#14, ss_promo_sk#15, ss_ticket_number#16, ss_quantity#17, ss_wholesale_cost#18, ss_list_price#19, ss_sales_price#20, ss_ext_discount_amt#21, ss_ext_sales_price#22, ss_ext_wholesale_cost#23, ss_ext_list_price#24, ss_ext_tax#25, ss_coupon_amt#26, ss_net_paid#27, ss_net_paid_inc_tax#28, ss_net_profit#29, d_date_sk#30, ... 80 more fields]
                        +- Filter ((((d_year#36 = 2001) && (d_date_sk#30 = ss_sold_date_sk#7)) && (i_item_sk#58 = ss_item_sk#9)) && ((s_store_sk#80 = ss_store_sk#14) && s_state#104 IN (TN,TN,TN,TN,TN,TN,TN,TN)))
                           +- Join Inner
                              :- Join Inner
                              :  :- Join Inner
                              :  :  :- SubqueryAlias `tpcds`.`store_sales`
                              :  :  :  +- Relation[ss_sold_date_sk#7,ss_sold_time_sk#8,ss_item_sk#9,ss_customer_sk#10,ss_cdemo_sk#11,ss_hdemo_sk#12,ss_addr_sk#13,ss_store_sk#14,ss_promo_sk#15,ss_ticket_number#16,ss_quantity#17,ss_wholesale_cost#18,ss_list_price#19,ss_sales_price#20,ss_ext_discount_amt#21,ss_ext_sales_price#22,ss_ext_wholesale_cost#23,ss_ext_list_price#24,ss_ext_tax#25,ss_coupon_amt#26,ss_net_paid#27,ss_net_paid_inc_tax#28,ss_net_profit#29] parquet
                              :  :  +- SubqueryAlias `d1`
                              :  :     +- SubqueryAlias `tpcds`.`date_dim`
                              :  :        +- Relation[d_date_sk#30,d_date_id#31,d_date#32,d_month_seq#33,d_week_seq#34,d_quarter_seq#35,d_year#36,d_dow#37,d_moy#38,d_dom#39,d_qoy#40,d_fy_year#41,d_fy_quarter_seq#42,d_fy_week_seq#43,d_day_name#44,d_quarter_name#45,d_holiday#46,d_weekend#47,d_following_holiday#48,d_first_dom#49,d_last_dom#50,d_same_day_ly#51,d_same_day_lq#52,d_current_day#53,... 4 more fields] parquet
                              :  +- SubqueryAlias `tpcds`.`item`
                              :     +- Relation[i_item_sk#58,i_item_id#59,i_rec_start_date#60,i_rec_end_date#61,i_item_desc#62,i_current_price#63,i_wholesale_cost#64,i_brand_id#65,i_brand#66,i_class_id#67,i_class#68,i_category_id#69,i_category#70,i_manufact_id#71,i_manufact#72,i_size#73,i_formulation#74,i_color#75,i_units#76,i_container#77,i_manager_id#78,i_product_name#79] parquet
                              +- SubqueryAlias `tpcds`.`store`
                                 +- Relation[s_store_sk#80,s_store_id#81,s_rec_start_date#82,s_rec_end_date#83,s_closed_date_sk#84,s_store_name#85,s_number_employees#86,s_floor_space#87,s_hours#88,s_manager#89,s_market_id#90,s_geography_class#91,s_market_desc#92,s_market_manager#93,s_division_id#94,s_division_name#95,s_company_id#96,s_company_name#97,s_street_number#98,s_street_name#99,s_street_type#100,s_suite_number#101,s_city#102,s_county#103,... 5 more fields] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [lochierarchy#1 DESC NULLS LAST, CASE WHEN (cast(lochierarchy#1 as int) = 0) THEN i_category#116 END ASC NULLS FIRST, rank_within_parent#2 ASC NULLS FIRST], true
      +- Project [gross_margin#0, i_category#116, i_class#117, lochierarchy#1, rank_within_parent#2]
         +- Window [rank(_w3#132) windowspecdefinition(_w1#130, _w2#131, _w3#132 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#2], [_w1#130, _w2#131], [_w3#132 ASC NULLS FIRST]
            +- Aggregate [i_category#116, i_class#117, spark_grouping_id#113], [(sum(ss_net_profit#29) / sum(ss_ext_sales_price#22)) AS gross_margin#0, i_category#116, i_class#117, (cast((shiftright(spark_grouping_id#113, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#113, 0) & 1) as tinyint)) AS lochierarchy#1, (cast((shiftright(spark_grouping_id#113, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#113, 0) & 1) as tinyint)) AS _w1#130, CASE WHEN (cast(cast((shiftright(spark_grouping_id#113, 0) & 1) as tinyint) as int) = 0) THEN i_category#116 END AS _w2#131, (sum(ss_net_profit#29) / sum(ss_ext_sales_price#22)) AS _w3#132]
               +- Expand [List(ss_ext_sales_price#22, ss_net_profit#29, i_category#70, i_class#68, 0), List(ss_ext_sales_price#22, ss_net_profit#29, i_category#70, null, 1), List(ss_ext_sales_price#22, ss_net_profit#29, null, null, 3)], [ss_ext_sales_price#22, ss_net_profit#29, i_category#116, i_class#117, spark_grouping_id#113]
                  +- Project [ss_ext_sales_price#22, ss_net_profit#29, i_category#70, i_class#68]
                     +- Join Inner, (s_store_sk#80 = ss_store_sk#14)
                        :- Project [ss_store_sk#14, ss_ext_sales_price#22, ss_net_profit#29, i_class#68, i_category#70]
                        :  +- Join Inner, (i_item_sk#58 = ss_item_sk#9)
                        :     :- Project [ss_item_sk#9, ss_store_sk#14, ss_ext_sales_price#22, ss_net_profit#29]
                        :     :  +- Join Inner, (d_date_sk#30 = ss_sold_date_sk#7)
                        :     :     :- Project [ss_sold_date_sk#7, ss_item_sk#9, ss_store_sk#14, ss_ext_sales_price#22, ss_net_profit#29]
                        :     :     :  +- Filter ((isnotnull(ss_sold_date_sk#7) && isnotnull(ss_item_sk#9)) && isnotnull(ss_store_sk#14))
                        :     :     :     +- Relation[ss_sold_date_sk#7,ss_sold_time_sk#8,ss_item_sk#9,ss_customer_sk#10,ss_cdemo_sk#11,ss_hdemo_sk#12,ss_addr_sk#13,ss_store_sk#14,ss_promo_sk#15,ss_ticket_number#16,ss_quantity#17,ss_wholesale_cost#18,ss_list_price#19,ss_sales_price#20,ss_ext_discount_amt#21,ss_ext_sales_price#22,ss_ext_wholesale_cost#23,ss_ext_list_price#24,ss_ext_tax#25,ss_coupon_amt#26,ss_net_paid#27,ss_net_paid_inc_tax#28,ss_net_profit#29] parquet
                        :     :     +- Project [d_date_sk#30]
                        :     :        +- Filter ((isnotnull(d_year#36) && (d_year#36 = 2001)) && isnotnull(d_date_sk#30))
                        :     :           +- Relation[d_date_sk#30,d_date_id#31,d_date#32,d_month_seq#33,d_week_seq#34,d_quarter_seq#35,d_year#36,d_dow#37,d_moy#38,d_dom#39,d_qoy#40,d_fy_year#41,d_fy_quarter_seq#42,d_fy_week_seq#43,d_day_name#44,d_quarter_name#45,d_holiday#46,d_weekend#47,d_following_holiday#48,d_first_dom#49,d_last_dom#50,d_same_day_ly#51,d_same_day_lq#52,d_current_day#53,... 4 more fields] parquet
                        :     +- Project [i_item_sk#58, i_class#68, i_category#70]
                        :        +- Filter isnotnull(i_item_sk#58)
                        :           +- Relation[i_item_sk#58,i_item_id#59,i_rec_start_date#60,i_rec_end_date#61,i_item_desc#62,i_current_price#63,i_wholesale_cost#64,i_brand_id#65,i_brand#66,i_class_id#67,i_class#68,i_category_id#69,i_category#70,i_manufact_id#71,i_manufact#72,i_size#73,i_formulation#74,i_color#75,i_units#76,i_container#77,i_manager_id#78,i_product_name#79] parquet
                        +- Project [s_store_sk#80]
                           +- Filter ((isnotnull(s_state#104) && (s_state#104 = TN)) && isnotnull(s_store_sk#80))
                              +- Relation[s_store_sk#80,s_store_id#81,s_rec_start_date#82,s_rec_end_date#83,s_closed_date_sk#84,s_store_name#85,s_number_employees#86,s_floor_space#87,s_hours#88,s_manager#89,s_market_id#90,s_geography_class#91,s_market_desc#92,s_market_manager#93,s_division_id#94,s_division_name#95,s_company_id#96,s_company_name#97,s_street_number#98,s_street_name#99,s_street_type#100,s_suite_number#101,s_city#102,s_county#103,... 5 more fields] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[lochierarchy#1 DESC NULLS LAST,CASE WHEN (cast(lochierarchy#1 as int) = 0) THEN i_category#116 END ASC NULLS FIRST,rank_within_parent#2 ASC NULLS FIRST], output=[gross_margin#0,i_category#116,i_class#117,lochierarchy#1,rank_within_parent#2])
+- *(7) Project [gross_margin#0, i_category#116, i_class#117, lochierarchy#1, rank_within_parent#2]
   +- Window [rank(_w3#132) windowspecdefinition(_w1#130, _w2#131, _w3#132 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#2], [_w1#130, _w2#131], [_w3#132 ASC NULLS FIRST]
      +- *(6) Sort [_w1#130 ASC NULLS FIRST, _w2#131 ASC NULLS FIRST, _w3#132 ASC NULLS FIRST], false, 0
         +- Exchange hashpartitioning(_w1#130, _w2#131, 200)
            +- *(5) HashAggregate(keys=[i_category#116, i_class#117, spark_grouping_id#113], functions=[sum(ss_net_profit#29), sum(ss_ext_sales_price#22)], output=[gross_margin#0, i_category#116, i_class#117, lochierarchy#1, _w1#130, _w2#131, _w3#132])
               +- Exchange hashpartitioning(i_category#116, i_class#117, spark_grouping_id#113, 200)
                  +- *(4) HashAggregate(keys=[i_category#116, i_class#117, spark_grouping_id#113], functions=[partial_sum(ss_net_profit#29), partial_sum(ss_ext_sales_price#22)], output=[i_category#116, i_class#117, spark_grouping_id#113, sum#144, sum#145])
                     +- *(4) Expand [List(ss_ext_sales_price#22, ss_net_profit#29, i_category#70, i_class#68, 0), List(ss_ext_sales_price#22, ss_net_profit#29, i_category#70, null, 1), List(ss_ext_sales_price#22, ss_net_profit#29, null, null, 3)], [ss_ext_sales_price#22, ss_net_profit#29, i_category#116, i_class#117, spark_grouping_id#113]
                        +- *(4) Project [ss_ext_sales_price#22, ss_net_profit#29, i_category#70, i_class#68]
                           +- *(4) BroadcastHashJoin [ss_store_sk#14], [s_store_sk#80], Inner, BuildRight
                              :- *(4) Project [ss_store_sk#14, ss_ext_sales_price#22, ss_net_profit#29, i_class#68, i_category#70]
                              :  +- *(4) BroadcastHashJoin [ss_item_sk#9], [i_item_sk#58], Inner, BuildRight
                              :     :- *(4) Project [ss_item_sk#9, ss_store_sk#14, ss_ext_sales_price#22, ss_net_profit#29]
                              :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#7], [d_date_sk#30], Inner, BuildRight
                              :     :     :- *(4) Project [ss_sold_date_sk#7, ss_item_sk#9, ss_store_sk#14, ss_ext_sales_price#22, ss_net_profit#29]
                              :     :     :  +- *(4) Filter ((isnotnull(ss_sold_date_sk#7) && isnotnull(ss_item_sk#9)) && isnotnull(ss_store_sk#14))
                              :     :     :     +- *(4) FileScan parquet tpcds.store_sales[ss_sold_date_sk#7,ss_item_sk#9,ss_store_sk#14,ss_ext_sales_price#22,ss_net_profit#29] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/angela/Desktop/spark-2.4.8-bin-hadoop2.7/spark-warehouse/tpcds.db/s..., PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:double,ss_net_profit...
                              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                              :     :        +- *(1) Project [d_date_sk#30]
                              :     :           +- *(1) Filter ((isnotnull(d_year#36) && (d_year#36 = 2001)) && isnotnull(d_date_sk#30))
                              :     :              +- *(1) FileScan parquet tpcds.date_dim[d_date_sk#30,d_year#36] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/angela/Desktop/spark-2.4.8-bin-hadoop2.7/spark-warehouse/tpcds.db/d..., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                              :        +- *(2) Project [i_item_sk#58, i_class#68, i_category#70]
                              :           +- *(2) Filter isnotnull(i_item_sk#58)
                              :              +- *(2) FileScan parquet tpcds.item[i_item_sk#58,i_class#68,i_category#70] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/angela/Desktop/spark-2.4.8-bin-hadoop2.7/spark-warehouse/tpcds.db/i..., PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                                 +- *(3) Project [s_store_sk#80]
                                    +- *(3) Filter ((isnotnull(s_state#104) && (s_state#104 = TN)) && isnotnull(s_store_sk#80))
                                       +- *(3) FileScan parquet tpcds.store[s_store_sk#80,s_state#104] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/Users/angela/Desktop/spark-2.4.8-bin-hadoop2.7/spark-warehouse/tpcds.db/s..., PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
Time taken: 4.241 seconds, Fetched 1 row(s)
Error in query: 
mismatched input '<EOF>' expecting {'(', 'SELECT', 'FROM', 'ADD', 'DESC', 'WITH', 'VALUES', 'CREATE', 'TABLE', 'INSERT', 'DELETE', 'DESCRIBE', 'EXPLAIN', 'SHOW', 'USE', 'DROP', 'ALTER', 'MAP', 'SET', 'RESET', 'START', 'COMMIT', 'ROLLBACK', 'REDUCE', 'REFRESH', 'CLEAR', 'CACHE', 'UNCACHE', 'DFS', 'TRUNCATE', 'ANALYZE', 'LIST', 'REVOKE', 'GRANT', 'LOCK', 'UNLOCK', 'MSCK', 'EXPORT', 'IMPORT', 'LOAD'}(line 2, pos 54)

== SQL ==

-- end query 36 in stream 0 using template query36.tpl
------------------------------------------------------^^^

